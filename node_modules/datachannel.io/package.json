{
  "name": "datachannel.io",
  "version": "0.0.4",
  "description": "node.js realtime signaling server",
  "keywords": [
    "realtime",
    "framework",
    "websocket",
    "webRTC",
    "events",
    "socket",
    "io"
  ],
  "dependencies": {
    "socket.io": "0.9.12",
    "cookie": "0.1.0",
    "connect": "2.9.0",
    "send": "~0.1.0"
  },
  "contributors": [
    {
      "name": "Marco Lanaro",
      "email": "marcolanaro@gmail.com"
    }
  ],
  "readme": "Datachannel.io is inspired by the amazing socket.io framework and implements a real-time communication using the WebRTC technology.\r\nPeers are directly connected and datas are exchanged between clients without passing throug the server.\r\n\r\nSocket.io is only used to serve signals between clients. You can choose the namespace where socket.io serve his signals.\r\nIn case peer-to-peer communication fails or your browser does not support WebRTC, socket.io serve also the data message.\r\n\r\n## Installing\r\n\tnpm install datachannel.io\r\n## On the Server\r\n#### Using with Node HTTP server\r\n\tvar server = require('http').createServer();\r\n\tvar dc = require('dataChannel.io').listen(server);\r\n\r\n\tserver.listen(8080);\r\n#### Without serving static files\r\nIf you do not want to serve the static client file at `/datachannel.io/datachannel.io.js` you need to add the parameter `static: false`.\r\n\r\n\tvar server = require('http').createServer();\r\n\tvar dc = require('dataChannel.io').listen(server, {\r\n\t\tstatic: false\r\n\t});\r\n\r\n\tserver.listen(8080);\r\n#### Session support\r\nIf you want to add session support you need to append the `session` object to the initialization with these parameters:\r\n* `cookie` [mandatory]: object with `name` of the cookie and `secret` key\r\n* `store` [mandatory]: the sessionStore object\r\n* `auth` [optional, default as `return true`]: function that return the authorization to use the socket.io server based on the current `session`.\r\n\r\nRedis session store example:\r\n\r\n\r\n\tvar server = require('http').createServer()\r\n\t  , connect = require('connect')\r\n\t  , RedisStore = require(\"connect-redis\")(connect)\r\n\t  , redis = require(\"redis\");\r\n\r\n\tvar dc = require('dataChannel.io').listen(server, {\r\n\t\tsession: {\r\n\t\t\tcookie: {name: \"datachannel.io\", secret: \"thisismysecretkey\"},\r\n\t\t\tstore: new RedisStore({\r\n\t\t\t\thost: \"localhost\",\r\n\t\t\t\tport: 6379,\r\n\t\t\t\tclient: redis.createClient()\r\n\t\t\t}),\r\n\t\t\tauth: function(session) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tserver.listen(8080);\r\n## On the Client\r\n#### index.html\r\n\t<!DOCTYPE html>\r\n\t<html>\r\n\t\t<head></head>\r\n\t\t<body>\r\n\t\t\t<script src=\"/socket.io/socket.io.js\"></script>\r\n\t\t\t<script src=\"/datachannel.io/datachannel.io.js\"></script>\r\n\t\t\t<script>\r\n\t\t\t\tvar datachannel = new DataChannel({\r\n\t\t\t\t\tsocketServer: 'http://<yourIP>'\r\n\t\t\t\t});\r\n\t\t\t</script>\r\n\t\t</body>\r\n\t</html>\r\n#### Initialization\r\nThe parameters of the `new DataChannel(object)` are:\r\n* `socketServer` [mandatory]: the address of the socket server used to serve signals between clients\r\n* `nameSpace` [optional, default as `'dataChannel'`]: namespace of the socket.io server\r\n* `rtcServers` [optional, default as `null`]: RTC Servers\r\n\r\n#### Join a Room\r\n\tdatachannel.join(\"room\");\r\n#### Leave a Room\r\n\tdatachannel.leave(\"room\");\r\n#### Send a Message\r\n\tdatachannel.in(\"room\").emit(\"chat\", {text: 'Hi!'});\r\n#### Get a Message\r\n\tdatachannel.in(\"room\").on(\"chat\", function(data) {\r\n\t\tconsole.log(data);\r\n\t});\r\n\r\n### Examples\r\nSome examples at:\r\n\r\n[https://github.com/marcolanaro/DataChannel.IO-Examples](https://github.com/marcolanaro/DataChannel.IO-Examples)\r\n\r\n### ToDo\r\n\r\n- Scaling with Redis Pub/Sub\r\n- SSL\r\n\r\nTested on Chrome v25 and Firefox v20.",
  "readmeFilename": "Readme.md",
  "_id": "datachannel.io@0.0.4",
  "_from": "datachannel.io@"
}
